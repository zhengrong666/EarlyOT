// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// tb__xbar_connect generated by `tlgen.py` tool

xbar_main_rot dut();

`DRIVE_CLK(clk_i)

initial force dut.clk_i = clk_i;

// TODO, all resets tie together
initial force dut.rst_ni = rst_n;

// Host TileLink interface connections
`CONNECT_TL_HOST_IF(rot, dut, clk_i, rst_n)

// Device TileLink interface connections
`CONNECT_TL_DEVICE_IF(rom_ctrl__rom, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(rom_ctrl__regs, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(hmac, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(kmac, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(aes, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(entropy_src, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(csrng, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(edn0, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(otbn, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(keymgr, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(sm3, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(sm4, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(rs_encode, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(rs_decode, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(puf1, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(puf2, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(puf_reg, dut, clk_i, rst_n)
`CONNECT_TL_DEVICE_IF(pcr, dut, clk_i, rst_n)
