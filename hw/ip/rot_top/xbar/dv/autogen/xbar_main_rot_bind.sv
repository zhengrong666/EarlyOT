// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_main_rot_bind module generated by `tlgen.py` tool for assertions
module xbar_main_rot_bind;
`ifndef GATE_LEVEL
  // Host interfaces
  bind xbar_main_rot tlul_assert #(.EndpointType("Device")) tlul_assert_host_rot (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_rot_i),
    .d2h    (tl_rot_o)
  );

  // Device interfaces
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_rom_ctrl__rom (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_rom_ctrl__rom_o),
    .d2h    (tl_rom_ctrl__rom_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_rom_ctrl__regs (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_rom_ctrl__regs_o),
    .d2h    (tl_rom_ctrl__regs_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_hmac (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_hmac_o),
    .d2h    (tl_hmac_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_kmac (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_kmac_o),
    .d2h    (tl_kmac_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_aes (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_aes_o),
    .d2h    (tl_aes_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_entropy_src (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_entropy_src_o),
    .d2h    (tl_entropy_src_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_csrng (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_csrng_o),
    .d2h    (tl_csrng_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_edn0 (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_edn0_o),
    .d2h    (tl_edn0_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_otbn (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_otbn_o),
    .d2h    (tl_otbn_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_keymgr (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_keymgr_o),
    .d2h    (tl_keymgr_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_sm3 (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_sm3_o),
    .d2h    (tl_sm3_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_sm4 (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_sm4_o),
    .d2h    (tl_sm4_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_rs_encode (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_rs_encode_o),
    .d2h    (tl_rs_encode_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_rs_decode (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_rs_decode_o),
    .d2h    (tl_rs_decode_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_puf1 (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_puf1_o),
    .d2h    (tl_puf1_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_puf2 (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_puf2_o),
    .d2h    (tl_puf2_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_puf_reg (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_puf_reg_o),
    .d2h    (tl_puf_reg_i)
  );
  bind xbar_main_rot tlul_assert #(.EndpointType("Host")) tlul_assert_device_pcr (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .h2d    (tl_pcr_o),
    .d2h    (tl_pcr_i)
  );
`endif
endmodule
