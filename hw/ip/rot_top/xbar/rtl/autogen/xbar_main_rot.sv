// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_main_rot module generated by `tlgen.py` tool
// all reset signals should be generated from one reset signal to not make any deadlock
//
// Interconnect
// rot
//   -> s1n_19
//     -> rom_ctrl.rom
//     -> rom_ctrl.regs
//     -> aes
//     -> entropy_src
//     -> csrng
//     -> edn0
//     -> hmac
//     -> otbn
//     -> keymgr
//     -> kmac
//     -> sm3
//     -> sm4
//     -> rs_encode
//     -> rs_decode
//     -> puf1
//     -> puf2
//     -> puf_reg
//     -> pcr

module xbar_main_rot (
  input clk_i,
  input rst_ni,

  // Host interfaces
  input  tlul_pkg::tl_h2d_t tl_rot_i,
  output tlul_pkg::tl_d2h_t tl_rot_o,

  // Device interfaces
  output tlul_pkg::tl_h2d_t tl_rom_ctrl__rom_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl__rom_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl__regs_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl__regs_i,
  output tlul_pkg::tl_h2d_t tl_hmac_o,
  input  tlul_pkg::tl_d2h_t tl_hmac_i,
  output tlul_pkg::tl_h2d_t tl_kmac_o,
  input  tlul_pkg::tl_d2h_t tl_kmac_i,
  output tlul_pkg::tl_h2d_t tl_aes_o,
  input  tlul_pkg::tl_d2h_t tl_aes_i,
  output tlul_pkg::tl_h2d_t tl_entropy_src_o,
  input  tlul_pkg::tl_d2h_t tl_entropy_src_i,
  output tlul_pkg::tl_h2d_t tl_csrng_o,
  input  tlul_pkg::tl_d2h_t tl_csrng_i,
  output tlul_pkg::tl_h2d_t tl_edn0_o,
  input  tlul_pkg::tl_d2h_t tl_edn0_i,
  output tlul_pkg::tl_h2d_t tl_otbn_o,
  input  tlul_pkg::tl_d2h_t tl_otbn_i,
  output tlul_pkg::tl_h2d_t tl_keymgr_o,
  input  tlul_pkg::tl_d2h_t tl_keymgr_i,
  output tlul_pkg::tl_h2d_t tl_sm3_o,
  input  tlul_pkg::tl_d2h_t tl_sm3_i,
  output tlul_pkg::tl_h2d_t tl_sm4_o,
  input  tlul_pkg::tl_d2h_t tl_sm4_i,
  output tlul_pkg::tl_h2d_t tl_rs_encode_o,
  input  tlul_pkg::tl_d2h_t tl_rs_encode_i,
  output tlul_pkg::tl_h2d_t tl_rs_decode_o,
  input  tlul_pkg::tl_d2h_t tl_rs_decode_i,
  output tlul_pkg::tl_h2d_t tl_puf1_o,
  input  tlul_pkg::tl_d2h_t tl_puf1_i,
  output tlul_pkg::tl_h2d_t tl_puf2_o,
  input  tlul_pkg::tl_d2h_t tl_puf2_i,
  output tlul_pkg::tl_h2d_t tl_puf_reg_o,
  input  tlul_pkg::tl_d2h_t tl_puf_reg_i,
  output tlul_pkg::tl_h2d_t tl_pcr_o,
  input  tlul_pkg::tl_d2h_t tl_pcr_i,

  input prim_mubi_pkg::mubi4_t scanmode_i
);

  import tlul_pkg::*;
  import tl_main_rot_pkg::*;

  // scanmode_i is currently not used, but provisioned for future use
  // this assignment prevents lint warnings
  logic unused_scanmode;
  assign unused_scanmode = ^scanmode_i;

  tl_h2d_t tl_s1n_19_us_h2d ;
  tl_d2h_t tl_s1n_19_us_d2h ;


  tl_h2d_t tl_s1n_19_ds_h2d [18];
  tl_d2h_t tl_s1n_19_ds_d2h [18];

  // Create steering signal
  logic [4:0] dev_sel_s1n_19;



  assign tl_rom_ctrl__rom_o = tl_s1n_19_ds_h2d[0];
  assign tl_s1n_19_ds_d2h[0] = tl_rom_ctrl__rom_i;

  assign tl_rom_ctrl__regs_o = tl_s1n_19_ds_h2d[1];
  assign tl_s1n_19_ds_d2h[1] = tl_rom_ctrl__regs_i;

  assign tl_aes_o = tl_s1n_19_ds_h2d[2];
  assign tl_s1n_19_ds_d2h[2] = tl_aes_i;

  assign tl_entropy_src_o = tl_s1n_19_ds_h2d[3];
  assign tl_s1n_19_ds_d2h[3] = tl_entropy_src_i;

  assign tl_csrng_o = tl_s1n_19_ds_h2d[4];
  assign tl_s1n_19_ds_d2h[4] = tl_csrng_i;

  assign tl_edn0_o = tl_s1n_19_ds_h2d[5];
  assign tl_s1n_19_ds_d2h[5] = tl_edn0_i;

  assign tl_hmac_o = tl_s1n_19_ds_h2d[6];
  assign tl_s1n_19_ds_d2h[6] = tl_hmac_i;

  assign tl_otbn_o = tl_s1n_19_ds_h2d[7];
  assign tl_s1n_19_ds_d2h[7] = tl_otbn_i;

  assign tl_keymgr_o = tl_s1n_19_ds_h2d[8];
  assign tl_s1n_19_ds_d2h[8] = tl_keymgr_i;

  assign tl_kmac_o = tl_s1n_19_ds_h2d[9];
  assign tl_s1n_19_ds_d2h[9] = tl_kmac_i;

  assign tl_sm3_o = tl_s1n_19_ds_h2d[10];
  assign tl_s1n_19_ds_d2h[10] = tl_sm3_i;

  assign tl_sm4_o = tl_s1n_19_ds_h2d[11];
  assign tl_s1n_19_ds_d2h[11] = tl_sm4_i;

  assign tl_rs_encode_o = tl_s1n_19_ds_h2d[12];
  assign tl_s1n_19_ds_d2h[12] = tl_rs_encode_i;

  assign tl_rs_decode_o = tl_s1n_19_ds_h2d[13];
  assign tl_s1n_19_ds_d2h[13] = tl_rs_decode_i;

  assign tl_puf1_o = tl_s1n_19_ds_h2d[14];
  assign tl_s1n_19_ds_d2h[14] = tl_puf1_i;

  assign tl_puf2_o = tl_s1n_19_ds_h2d[15];
  assign tl_s1n_19_ds_d2h[15] = tl_puf2_i;

  assign tl_puf_reg_o = tl_s1n_19_ds_h2d[16];
  assign tl_s1n_19_ds_d2h[16] = tl_puf_reg_i;

  assign tl_pcr_o = tl_s1n_19_ds_h2d[17];
  assign tl_s1n_19_ds_d2h[17] = tl_pcr_i;

  assign tl_s1n_19_us_h2d = tl_rot_i;
  assign tl_rot_o = tl_s1n_19_us_d2h;

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_19 = 5'd18;
    if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_ROM_CTRL__ROM + ADDR_SPACE_ROM_CTRL__ROM)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_ROM_CTRL__ROM))) begin
      dev_sel_s1n_19 = 5'd0;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_ROM_CTRL__REGS + ADDR_SPACE_ROM_CTRL__REGS)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_ROM_CTRL__REGS))) begin
      dev_sel_s1n_19 = 5'd1;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_AES + ADDR_SPACE_AES)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_AES))) begin
      dev_sel_s1n_19 = 5'd2;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_ENTROPY_SRC + ADDR_SPACE_ENTROPY_SRC)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_ENTROPY_SRC))) begin
      dev_sel_s1n_19 = 5'd3;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_CSRNG + ADDR_SPACE_CSRNG)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_CSRNG))) begin
      dev_sel_s1n_19 = 5'd4;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_EDN0 + ADDR_SPACE_EDN0)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_EDN0))) begin
      dev_sel_s1n_19 = 5'd5;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_HMAC + ADDR_SPACE_HMAC)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_HMAC))) begin
      dev_sel_s1n_19 = 5'd6;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_OTBN + ADDR_SPACE_OTBN)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_OTBN))) begin
      dev_sel_s1n_19 = 5'd7;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_KEYMGR + ADDR_SPACE_KEYMGR)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_KEYMGR))) begin
      dev_sel_s1n_19 = 5'd8;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_KMAC + ADDR_SPACE_KMAC)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_KMAC))) begin
      dev_sel_s1n_19 = 5'd9;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_SM3 + ADDR_SPACE_SM3)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_SM3))) begin
      dev_sel_s1n_19 = 5'd10;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_SM4 + ADDR_SPACE_SM4)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_SM4))) begin
      dev_sel_s1n_19 = 5'd11;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_RS_ENCODE + ADDR_SPACE_RS_ENCODE)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_RS_ENCODE))) begin
      dev_sel_s1n_19 = 5'd12;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_RS_DECODE + ADDR_SPACE_RS_DECODE)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_RS_DECODE))) begin
      dev_sel_s1n_19 = 5'd13;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_PUF1 + ADDR_SPACE_PUF1)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_PUF1))) begin
      dev_sel_s1n_19 = 5'd14;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_PUF2 + ADDR_SPACE_PUF2)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_PUF2))) begin
      dev_sel_s1n_19 = 5'd15;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_PUF_REG + ADDR_SPACE_PUF_REG)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_PUF_REG))) begin
      dev_sel_s1n_19 = 5'd16;

    end else if (((tl_s1n_19_us_h2d.a_address <= (ADDR_MASK_PCR + ADDR_SPACE_PCR)) &&
       (tl_s1n_19_us_h2d.a_address >= ADDR_SPACE_PCR))) begin
      dev_sel_s1n_19 = 5'd17;
end
  end


  // Instantiation phase
  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (72'h0),
    .DRspDepth (72'h0),
    .N         (18)
  ) u_s1n_19 (
    .clk_i        (clk_i),
    .rst_ni       (rst_ni),
    .tl_h_i       (tl_s1n_19_us_h2d),
    .tl_h_o       (tl_s1n_19_us_d2h),
    .tl_d_o       (tl_s1n_19_ds_h2d),
    .tl_d_i       (tl_s1n_19_ds_d2h),
    .dev_select_i (dev_sel_s1n_19)
  );

endmodule
