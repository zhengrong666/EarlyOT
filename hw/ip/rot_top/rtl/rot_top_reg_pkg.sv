// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package rot_top_reg_pkg;

  // Param list
  parameter int NumAlerts = 12;

  // Address widths within the block
  parameter int BlockAw = 5;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } kmac_kmac_done;
    struct packed {
      logic        q;
    } kmac_fifo_empty;
    struct packed {
      logic        q;
    } kmac_kmac_err;
    struct packed {
      logic        q;
    } keymgr_op_done;
    struct packed {
      logic        q;
    } hmac_hmac_done;
    struct packed {
      logic        q;
    } hmac_fifo_empty;
    struct packed {
      logic        q;
    } hmac_hmac_err;
    struct packed {
      logic        q;
    } entropy_src_es_entropy_valid;
    struct packed {
      logic        q;
    } entropy_src_es_health_test_failed;
    struct packed {
      logic        q;
    } entropy_src_es_observe_fifo_ready;
    struct packed {
      logic        q;
    } entropy_src_es_fatal_err;
    struct packed {
      logic        q;
    } edn0_edn_cmd_req_done;
    struct packed {
      logic        q;
    } edn0_edn_fatal_err;
    struct packed {
      logic        q;
    } csrng_cs_cmd_req_done;
    struct packed {
      logic        q;
    } csrng_cs_entropy_req;
    struct packed {
      logic        q;
    } csrng_cs_hw_inst_exc;
    struct packed {
      logic        q;
    } csrng_cs_fatal_err;
  } rot_top_reg2hw_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } kmac_kmac_done;
    struct packed {
      logic        q;
    } kmac_fifo_empty;
    struct packed {
      logic        q;
    } kmac_kmac_err;
    struct packed {
      logic        q;
    } keymgr_op_done;
    struct packed {
      logic        q;
    } hmac_hmac_done;
    struct packed {
      logic        q;
    } hmac_fifo_empty;
    struct packed {
      logic        q;
    } hmac_hmac_err;
    struct packed {
      logic        q;
    } entropy_src_es_entropy_valid;
    struct packed {
      logic        q;
    } entropy_src_es_health_test_failed;
    struct packed {
      logic        q;
    } entropy_src_es_observe_fifo_ready;
    struct packed {
      logic        q;
    } entropy_src_es_fatal_err;
    struct packed {
      logic        q;
    } edn0_edn_cmd_req_done;
    struct packed {
      logic        q;
    } edn0_edn_fatal_err;
    struct packed {
      logic        q;
    } csrng_cs_cmd_req_done;
    struct packed {
      logic        q;
    } csrng_cs_entropy_req;
    struct packed {
      logic        q;
    } csrng_cs_hw_inst_exc;
    struct packed {
      logic        q;
    } csrng_cs_fatal_err;
  } rot_top_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } kmac_kmac_done;
    struct packed {
      logic        q;
      logic        qe;
    } kmac_fifo_empty;
    struct packed {
      logic        q;
      logic        qe;
    } kmac_kmac_err;
    struct packed {
      logic        q;
      logic        qe;
    } keymgr_op_done;
    struct packed {
      logic        q;
      logic        qe;
    } hmac_hmac_done;
    struct packed {
      logic        q;
      logic        qe;
    } hmac_fifo_empty;
    struct packed {
      logic        q;
      logic        qe;
    } hmac_hmac_err;
    struct packed {
      logic        q;
      logic        qe;
    } entropy_src_es_entropy_valid;
    struct packed {
      logic        q;
      logic        qe;
    } entropy_src_es_health_test_failed;
    struct packed {
      logic        q;
      logic        qe;
    } entropy_src_es_observe_fifo_ready;
    struct packed {
      logic        q;
      logic        qe;
    } entropy_src_es_fatal_err;
    struct packed {
      logic        q;
      logic        qe;
    } edn0_edn_cmd_req_done;
    struct packed {
      logic        q;
      logic        qe;
    } edn0_edn_fatal_err;
    struct packed {
      logic        q;
      logic        qe;
    } csrng_cs_cmd_req_done;
    struct packed {
      logic        q;
      logic        qe;
    } csrng_cs_entropy_req;
    struct packed {
      logic        q;
      logic        qe;
    } csrng_cs_hw_inst_exc;
    struct packed {
      logic        q;
      logic        qe;
    } csrng_cs_fatal_err;
  } rot_top_reg2hw_intr_test_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } fatal_fault_hmac;
    struct packed {
      logic        q;
      logic        qe;
    } recov_operation_err_kmac;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_fault_err_kmac;
    struct packed {
      logic        q;
      logic        qe;
    } recov_operation_err_keymgr;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_fault_err_keymgr;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_rom_ctrl;
    struct packed {
      logic        q;
      logic        qe;
    } recov_alert_edn;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_alert_edn;
    struct packed {
      logic        q;
      logic        qe;
    } recov_alert_csrng;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_alert_csrng;
    struct packed {
      logic        q;
      logic        qe;
    } recov_alert_entropy_src;
    struct packed {
      logic        q;
      logic        qe;
    } fatal_alert_entropy_entropy_src;
  } rot_top_reg2hw_alert_test_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } kmac_kmac_done;
    struct packed {
      logic        d;
      logic        de;
    } kmac_fifo_empty;
    struct packed {
      logic        d;
      logic        de;
    } kmac_kmac_err;
    struct packed {
      logic        d;
      logic        de;
    } keymgr_op_done;
    struct packed {
      logic        d;
      logic        de;
    } hmac_hmac_done;
    struct packed {
      logic        d;
      logic        de;
    } hmac_fifo_empty;
    struct packed {
      logic        d;
      logic        de;
    } hmac_hmac_err;
    struct packed {
      logic        d;
      logic        de;
    } entropy_src_es_entropy_valid;
    struct packed {
      logic        d;
      logic        de;
    } entropy_src_es_health_test_failed;
    struct packed {
      logic        d;
      logic        de;
    } entropy_src_es_observe_fifo_ready;
    struct packed {
      logic        d;
      logic        de;
    } entropy_src_es_fatal_err;
    struct packed {
      logic        d;
      logic        de;
    } edn0_edn_cmd_req_done;
    struct packed {
      logic        d;
      logic        de;
    } edn0_edn_fatal_err;
    struct packed {
      logic        d;
      logic        de;
    } csrng_cs_cmd_req_done;
    struct packed {
      logic        d;
      logic        de;
    } csrng_cs_entropy_req;
    struct packed {
      logic        d;
      logic        de;
    } csrng_cs_hw_inst_exc;
    struct packed {
      logic        d;
      logic        de;
    } csrng_cs_fatal_err;
  } rot_top_hw2reg_intr_state_reg_t;

  typedef struct packed {
    logic        d;
  } rot_top_hw2reg_cfg_regwen_reg_t;

  // Register -> HW type
  typedef struct packed {
    rot_top_reg2hw_intr_state_reg_t intr_state; // [91:75]
    rot_top_reg2hw_intr_enable_reg_t intr_enable; // [74:58]
    rot_top_reg2hw_intr_test_reg_t intr_test; // [57:24]
    rot_top_reg2hw_alert_test_reg_t alert_test; // [23:0]
  } rot_top_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    rot_top_hw2reg_intr_state_reg_t intr_state; // [34:1]
    rot_top_hw2reg_cfg_regwen_reg_t cfg_regwen; // [0:0]
  } rot_top_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] ROT_TOP_INTR_STATE_OFFSET = 5'h 0;
  parameter logic [BlockAw-1:0] ROT_TOP_INTR_ENABLE_OFFSET = 5'h 4;
  parameter logic [BlockAw-1:0] ROT_TOP_INTR_TEST_OFFSET = 5'h 8;
  parameter logic [BlockAw-1:0] ROT_TOP_ALERT_TEST_OFFSET = 5'h c;
  parameter logic [BlockAw-1:0] ROT_TOP_CFG_REGWEN_OFFSET = 5'h 10;

  // Reset values for hwext registers and their fields
  parameter logic [16:0] ROT_TOP_INTR_TEST_RESVAL = 17'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_KMAC_KMAC_DONE_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_KMAC_FIFO_EMPTY_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_KMAC_KMAC_ERR_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_KEYMGR_OP_DONE_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_HMAC_HMAC_DONE_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_HMAC_FIFO_EMPTY_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_HMAC_HMAC_ERR_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_ENTROPY_SRC_ES_ENTROPY_VALID_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_ENTROPY_SRC_ES_HEALTH_TEST_FAILED_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_ENTROPY_SRC_ES_OBSERVE_FIFO_READY_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_ENTROPY_SRC_ES_FATAL_ERR_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_EDN0_EDN_CMD_REQ_DONE_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_EDN0_EDN_FATAL_ERR_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_CSRNG_CS_CMD_REQ_DONE_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_CSRNG_CS_ENTROPY_REQ_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_CSRNG_CS_HW_INST_EXC_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_INTR_TEST_CSRNG_CS_FATAL_ERR_RESVAL = 1'h 0;
  parameter logic [11:0] ROT_TOP_ALERT_TEST_RESVAL = 12'h 0;
  parameter logic [0:0] ROT_TOP_ALERT_TEST_FATAL_FAULT_HMAC_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_ALERT_TEST_RECOV_OPERATION_ERR_KMAC_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_ALERT_TEST_FATAL_FAULT_ERR_KMAC_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_ALERT_TEST_RECOV_OPERATION_ERR_KEYMGR_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_ALERT_TEST_FATAL_FAULT_ERR_KEYMGR_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_ALERT_TEST_FATAL_ROM_CTRL_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_ALERT_TEST_RECOV_ALERT_EDN_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_ALERT_TEST_FATAL_ALERT_EDN_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_ALERT_TEST_RECOV_ALERT_CSRNG_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_ALERT_TEST_FATAL_ALERT_CSRNG_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_ALERT_TEST_RECOV_ALERT_ENTROPY_SRC_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_ALERT_TEST_FATAL_ALERT_ENTROPY_ENTROPY_SRC_RESVAL = 1'h 0;
  parameter logic [0:0] ROT_TOP_CFG_REGWEN_RESVAL = 1'h 1;
  parameter logic [0:0] ROT_TOP_CFG_REGWEN_EN_RESVAL = 1'h 1;

  // Register index
  typedef enum int {
    ROT_TOP_INTR_STATE,
    ROT_TOP_INTR_ENABLE,
    ROT_TOP_INTR_TEST,
    ROT_TOP_ALERT_TEST,
    ROT_TOP_CFG_REGWEN
  } rot_top_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] ROT_TOP_PERMIT [5] = '{
    4'b 0111, // index[0] ROT_TOP_INTR_STATE
    4'b 0111, // index[1] ROT_TOP_INTR_ENABLE
    4'b 0111, // index[2] ROT_TOP_INTR_TEST
    4'b 0011, // index[3] ROT_TOP_ALERT_TEST
    4'b 0001  // index[4] ROT_TOP_CFG_REGWEN
  };

endpackage
