// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// xbar_main module generated by `tlgen.py` tool
// all reset signals should be generated from one reset signal to not make any deadlock
//
// Interconnect

//   -> s1n_57
//     -> sm1_28
//       -> rom_ctrl.rom
//     -> sm1_33
//       -> rom_ctrl.regs
//     -> sm1_50
//       -> hmac
//     -> sm1_53
//       -> keymgr
//     -> sm1_54
//       -> kmac

module xbar_main (
  input clk__i,
  input rst_ni,
  

  // Host interfaces
  input  tlul_pkg::tl_h2d_t tl_rv_core_ibex__cored_i,
  output tlul_pkg::tl_d2h_t tl_rv_core_ibex__cored_o,
  

  // Device interfaces
  output tlul_pkg::tl_h2d_t tl_rom_ctrl__rom_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl__rom_i,
  output tlul_pkg::tl_h2d_t tl_rom_ctrl__regs_o,
  input  tlul_pkg::tl_d2h_t tl_rom_ctrl__regs_i,
  output tlul_pkg::tl_h2d_t tl_hmac_o,
  input  tlul_pkg::tl_d2h_t tl_hmac_i,
  output tlul_pkg::tl_h2d_t tl_kmac_o,
  input  tlul_pkg::tl_d2h_t tl_kmac_i,
  output tlul_pkg::tl_h2d_t tl_keymgr_o,
  input  tlul_pkg::tl_d2h_t tl_keymgr_i
);

  import tlul_pkg::*;
  import tl_main_pkg::*;

  // scanmode_i is currently not used, but provisioned for future use
  // this assignment prevents lint warnings
//   logic unused_scanmode;
//   assign unused_scanmode = ^scanmode_i;


  // Create steering signal


  tl_h2d_t tl_sm1_28_us_h2d [3];
  tl_d2h_t tl_sm1_28_us_d2h [3];

  tl_h2d_t tl_sm1_28_ds_h2d ;
  tl_d2h_t tl_sm1_28_ds_d2h ;


  tl_h2d_t tl_s1n_32_us_h2d ;
  tl_d2h_t tl_s1n_32_us_d2h ;


  tl_h2d_t tl_s1n_32_ds_h2d [24];
  tl_d2h_t tl_s1n_32_ds_d2h [24];

  // Create steering signal
  logic [4:0] dev_sel_s1n_32;


  tl_h2d_t tl_sm1_33_us_h2d [2];
  tl_d2h_t tl_sm1_33_us_d2h [2];

  tl_h2d_t tl_sm1_33_ds_h2d ;
  tl_d2h_t tl_sm1_33_ds_d2h ;


  tl_h2d_t tl_sm1_50_us_h2d [2];
  tl_d2h_t tl_sm1_50_us_d2h [2];

  tl_h2d_t tl_sm1_50_ds_h2d ;
  tl_d2h_t tl_sm1_50_ds_d2h ;


  tl_h2d_t tl_sm1_53_us_h2d [2];
  tl_d2h_t tl_sm1_53_us_d2h [2];

  tl_h2d_t tl_sm1_53_ds_h2d ;
  tl_d2h_t tl_sm1_53_ds_d2h ;


  tl_h2d_t tl_sm1_54_us_h2d [2];
  tl_d2h_t tl_sm1_54_us_d2h [2];

  tl_h2d_t tl_sm1_54_ds_h2d ;
  tl_d2h_t tl_sm1_54_ds_d2h ;



  // Create steering signal
  
  assign tl_sm1_28_us_h2d[1] = tl_s1n_32_ds_h2d[0];
  assign tl_s1n_32_ds_d2h[0] = tl_sm1_28_us_d2h[1];

  assign tl_sm1_33_us_h2d[0] = tl_s1n_32_ds_h2d[1];
  assign tl_s1n_32_ds_d2h[1] = tl_sm1_33_us_d2h[0];

  assign tl_sm1_50_us_h2d[0] = tl_s1n_32_ds_h2d[17];
  assign tl_s1n_32_ds_d2h[17] = tl_sm1_50_us_d2h[0];

  assign tl_sm1_53_us_h2d[0] = tl_s1n_32_ds_h2d[20];
  assign tl_s1n_32_ds_d2h[20] = tl_sm1_53_us_d2h[0];

  assign tl_sm1_54_us_h2d[0] = tl_s1n_32_ds_h2d[21];
  assign tl_s1n_32_ds_d2h[21] = tl_sm1_54_us_d2h[0];




  assign tl_rom_ctrl__rom_o = tl_sm1_28_ds_h2d;
  assign tl_sm1_28_ds_d2h = tl_rom_ctrl__rom_i;

  assign tl_rom_ctrl__regs_o = tl_sm1_33_ds_h2d;
  assign tl_sm1_33_ds_d2h = tl_rom_ctrl__regs_i;

  assign tl_hmac_o = tl_sm1_50_ds_h2d;
  assign tl_sm1_50_ds_d2h = tl_hmac_i;

  assign tl_keymgr_o = tl_sm1_53_ds_h2d;
  assign tl_sm1_53_ds_d2h = tl_keymgr_i;

  assign tl_kmac_o = tl_sm1_54_ds_h2d;
  assign tl_sm1_54_ds_d2h = tl_kmac_i;

  

  always_comb begin
    // default steering to generate error response if address is not within the range
    dev_sel_s1n_32 = 5'd24;
    if ((tl_s1n_32_us_h2d.a_address &
         ~(ADDR_MASK_ROM_CTRL__ROM)) == ADDR_SPACE_ROM_CTRL__ROM) begin
      dev_sel_s1n_32 = 5'd0;

    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_ROM_CTRL__REGS)) == ADDR_SPACE_ROM_CTRL__REGS) begin
      dev_sel_s1n_32 = 5'd1;
    
    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_HMAC)) == ADDR_SPACE_HMAC) begin
      dev_sel_s1n_32 = 5'd17;

    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_KEYMGR)) == ADDR_SPACE_KEYMGR) begin
      dev_sel_s1n_32 = 5'd20;

    end else if ((tl_s1n_32_us_h2d.a_address &
                  ~(ADDR_MASK_KMAC)) == ADDR_SPACE_KMAC) begin
      dev_sel_s1n_32 = 5'd21;
    end
  end


  // Instantiation phase
 
  tlul_socket_m1 #(
    .HReqDepth (12'h0),
    .HRspDepth (12'h0),
    .DRspPass  (1'b0),
    .M         (3)
  ) u_sm1_28 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_28_us_h2d),
    .tl_h_o       (tl_sm1_28_us_d2h),
    .tl_d_o       (tl_sm1_28_ds_h2d),
    .tl_d_i       (tl_sm1_28_ds_d2h)
  );
  
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_33 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_33_us_h2d),
    .tl_h_o       (tl_sm1_33_us_d2h),
    .tl_d_o       (tl_sm1_33_ds_h2d),
    .tl_d_i       (tl_sm1_33_ds_d2h)
  );
  
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_50 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_50_us_h2d),
    .tl_h_o       (tl_sm1_50_us_d2h),
    .tl_d_o       (tl_sm1_50_ds_h2d),
    .tl_d_i       (tl_sm1_50_ds_d2h)
  );
  
  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_53 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_53_us_h2d),
    .tl_h_o       (tl_sm1_53_us_d2h),
    .tl_d_o       (tl_sm1_53_ds_h2d),
    .tl_d_i       (tl_sm1_53_ds_d2h)
  );

  tlul_socket_m1 #(
    .HReqDepth (8'h0),
    .HRspDepth (8'h0),
    .DReqPass  (1'b0),
    .DRspPass  (1'b0),
    .M         (2)
  ) u_sm1_54 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_sm1_54_us_h2d),
    .tl_h_o       (tl_sm1_54_us_d2h),
    .tl_d_o       (tl_sm1_54_ds_h2d),
    .tl_d_i       (tl_sm1_54_ds_d2h)
  );
  

  tlul_socket_1n #(
    .HReqDepth (4'h0),
    .HRspDepth (4'h0),
    .DReqDepth (96'h0),
    .DRspDepth (96'h0),
    .N         (24)
  ) u_s1n_32 (
    .clk_i        (clk_main_i),
    .rst_ni       (rst_main_ni),
    .tl_h_i       (tl_s1n_32_us_h2d),
    .tl_h_o       (tl_s1n_32_us_d2h),
    .tl_d_o       (tl_s1n_32_ds_h2d),
    .tl_d_i       (tl_s1n_32_ds_d2h),
    .dev_select_i (dev_sel_s1n_32)
  );
 

endmodule
