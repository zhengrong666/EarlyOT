// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module rot_top_reg_top (
  input clk_i,
  input rst_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,
  // To HW
  output rot_top_reg_pkg::rot_top_reg2hw_t reg2hw, // Write
  input  rot_top_reg_pkg::rot_top_hw2reg_t hw2reg, // Read

  // Integrity check errors
  output logic intg_err_o,

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import rot_top_reg_pkg::* ;

  localparam int AW = 5;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [4:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(5)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_we;
  logic intr_state_kmac_kmac_done_qs;
  logic intr_state_kmac_kmac_done_wd;
  logic intr_state_kmac_fifo_empty_qs;
  logic intr_state_kmac_fifo_empty_wd;
  logic intr_state_kmac_kmac_err_qs;
  logic intr_state_kmac_kmac_err_wd;
  logic intr_state_keymgr_op_done_qs;
  logic intr_state_keymgr_op_done_wd;
  logic intr_state_hmac_hmac_done_qs;
  logic intr_state_hmac_hmac_done_wd;
  logic intr_state_hmac_fifo_empty_qs;
  logic intr_state_hmac_fifo_empty_wd;
  logic intr_state_hmac_hmac_err_qs;
  logic intr_state_hmac_hmac_err_wd;
  logic intr_state_entropy_src_es_entropy_valid_qs;
  logic intr_state_entropy_src_es_entropy_valid_wd;
  logic intr_state_entropy_src_es_health_test_failed_qs;
  logic intr_state_entropy_src_es_health_test_failed_wd;
  logic intr_state_entropy_src_es_observe_fifo_ready_qs;
  logic intr_state_entropy_src_es_observe_fifo_ready_wd;
  logic intr_state_entropy_src_es_fatal_err_qs;
  logic intr_state_entropy_src_es_fatal_err_wd;
  logic intr_state_edn0_edn_cmd_req_done_qs;
  logic intr_state_edn0_edn_cmd_req_done_wd;
  logic intr_state_edn0_edn_fatal_err_qs;
  logic intr_state_edn0_edn_fatal_err_wd;
  logic intr_state_csrng_cs_cmd_req_done_qs;
  logic intr_state_csrng_cs_cmd_req_done_wd;
  logic intr_state_csrng_cs_entropy_req_qs;
  logic intr_state_csrng_cs_entropy_req_wd;
  logic intr_state_csrng_cs_hw_inst_exc_qs;
  logic intr_state_csrng_cs_hw_inst_exc_wd;
  logic intr_state_csrng_cs_fatal_err_qs;
  logic intr_state_csrng_cs_fatal_err_wd;
  logic intr_enable_we;
  logic intr_enable_kmac_kmac_done_qs;
  logic intr_enable_kmac_kmac_done_wd;
  logic intr_enable_kmac_fifo_empty_qs;
  logic intr_enable_kmac_fifo_empty_wd;
  logic intr_enable_kmac_kmac_err_qs;
  logic intr_enable_kmac_kmac_err_wd;
  logic intr_enable_keymgr_op_done_qs;
  logic intr_enable_keymgr_op_done_wd;
  logic intr_enable_hmac_hmac_done_qs;
  logic intr_enable_hmac_hmac_done_wd;
  logic intr_enable_hmac_fifo_empty_qs;
  logic intr_enable_hmac_fifo_empty_wd;
  logic intr_enable_hmac_hmac_err_qs;
  logic intr_enable_hmac_hmac_err_wd;
  logic intr_enable_entropy_src_es_entropy_valid_qs;
  logic intr_enable_entropy_src_es_entropy_valid_wd;
  logic intr_enable_entropy_src_es_health_test_failed_qs;
  logic intr_enable_entropy_src_es_health_test_failed_wd;
  logic intr_enable_entropy_src_es_observe_fifo_ready_qs;
  logic intr_enable_entropy_src_es_observe_fifo_ready_wd;
  logic intr_enable_entropy_src_es_fatal_err_qs;
  logic intr_enable_entropy_src_es_fatal_err_wd;
  logic intr_enable_edn0_edn_cmd_req_done_qs;
  logic intr_enable_edn0_edn_cmd_req_done_wd;
  logic intr_enable_edn0_edn_fatal_err_qs;
  logic intr_enable_edn0_edn_fatal_err_wd;
  logic intr_enable_csrng_cs_cmd_req_done_qs;
  logic intr_enable_csrng_cs_cmd_req_done_wd;
  logic intr_enable_csrng_cs_entropy_req_qs;
  logic intr_enable_csrng_cs_entropy_req_wd;
  logic intr_enable_csrng_cs_hw_inst_exc_qs;
  logic intr_enable_csrng_cs_hw_inst_exc_wd;
  logic intr_enable_csrng_cs_fatal_err_qs;
  logic intr_enable_csrng_cs_fatal_err_wd;
  logic intr_test_we;
  logic intr_test_kmac_kmac_done_wd;
  logic intr_test_kmac_fifo_empty_wd;
  logic intr_test_kmac_kmac_err_wd;
  logic intr_test_keymgr_op_done_wd;
  logic intr_test_hmac_hmac_done_wd;
  logic intr_test_hmac_fifo_empty_wd;
  logic intr_test_hmac_hmac_err_wd;
  logic intr_test_entropy_src_es_entropy_valid_wd;
  logic intr_test_entropy_src_es_health_test_failed_wd;
  logic intr_test_entropy_src_es_observe_fifo_ready_wd;
  logic intr_test_entropy_src_es_fatal_err_wd;
  logic intr_test_edn0_edn_cmd_req_done_wd;
  logic intr_test_edn0_edn_fatal_err_wd;
  logic intr_test_csrng_cs_cmd_req_done_wd;
  logic intr_test_csrng_cs_entropy_req_wd;
  logic intr_test_csrng_cs_hw_inst_exc_wd;
  logic intr_test_csrng_cs_fatal_err_wd;
  logic alert_test_we;
  logic alert_test_fatal_fault_hmac_wd;
  logic alert_test_recov_operation_err_kmac_wd;
  logic alert_test_fatal_fault_err_kmac_wd;
  logic alert_test_recov_operation_err_keymgr_wd;
  logic alert_test_fatal_fault_err_keymgr_wd;
  logic alert_test_fatal_rom_ctrl_wd;
  logic alert_test_recov_alert_edn_wd;
  logic alert_test_fatal_alert_edn_wd;
  logic alert_test_recov_alert_csrng_wd;
  logic alert_test_fatal_alert_csrng_wd;
  logic alert_test_recov_alert_entropy_src_wd;
  logic alert_test_fatal_alert_entropy_entropy_src_wd;
  logic cfg_regwen_re;
  logic cfg_regwen_qs;

  // Register instances
  // R[intr_state]: V(False)
  //   F[kmac_kmac_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_kmac_kmac_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_kmac_kmac_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.kmac_kmac_done.de),
    .d      (hw2reg.intr_state.kmac_kmac_done.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.kmac_kmac_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_kmac_kmac_done_qs)
  );

  //   F[kmac_fifo_empty]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_kmac_fifo_empty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_kmac_fifo_empty_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.kmac_fifo_empty.de),
    .d      (hw2reg.intr_state.kmac_fifo_empty.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.kmac_fifo_empty.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_kmac_fifo_empty_qs)
  );

  //   F[kmac_kmac_err]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_kmac_kmac_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_kmac_kmac_err_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.kmac_kmac_err.de),
    .d      (hw2reg.intr_state.kmac_kmac_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.kmac_kmac_err.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_kmac_kmac_err_qs)
  );

  //   F[keymgr_op_done]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_keymgr_op_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_keymgr_op_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.keymgr_op_done.de),
    .d      (hw2reg.intr_state.keymgr_op_done.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.keymgr_op_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_keymgr_op_done_qs)
  );

  //   F[hmac_hmac_done]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_hmac_hmac_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_hmac_hmac_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.hmac_hmac_done.de),
    .d      (hw2reg.intr_state.hmac_hmac_done.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.hmac_hmac_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_hmac_hmac_done_qs)
  );

  //   F[hmac_fifo_empty]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_hmac_fifo_empty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_hmac_fifo_empty_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.hmac_fifo_empty.de),
    .d      (hw2reg.intr_state.hmac_fifo_empty.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.hmac_fifo_empty.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_hmac_fifo_empty_qs)
  );

  //   F[hmac_hmac_err]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_hmac_hmac_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_hmac_hmac_err_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.hmac_hmac_err.de),
    .d      (hw2reg.intr_state.hmac_hmac_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.hmac_hmac_err.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_hmac_hmac_err_qs)
  );

  //   F[entropy_src_es_entropy_valid]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_entropy_src_es_entropy_valid (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_entropy_src_es_entropy_valid_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.entropy_src_es_entropy_valid.de),
    .d      (hw2reg.intr_state.entropy_src_es_entropy_valid.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.entropy_src_es_entropy_valid.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_entropy_src_es_entropy_valid_qs)
  );

  //   F[entropy_src_es_health_test_failed]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_entropy_src_es_health_test_failed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_entropy_src_es_health_test_failed_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.entropy_src_es_health_test_failed.de),
    .d      (hw2reg.intr_state.entropy_src_es_health_test_failed.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.entropy_src_es_health_test_failed.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_entropy_src_es_health_test_failed_qs)
  );

  //   F[entropy_src_es_observe_fifo_ready]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_entropy_src_es_observe_fifo_ready (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_entropy_src_es_observe_fifo_ready_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.entropy_src_es_observe_fifo_ready.de),
    .d      (hw2reg.intr_state.entropy_src_es_observe_fifo_ready.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.entropy_src_es_observe_fifo_ready.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_entropy_src_es_observe_fifo_ready_qs)
  );

  //   F[entropy_src_es_fatal_err]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_entropy_src_es_fatal_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_entropy_src_es_fatal_err_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.entropy_src_es_fatal_err.de),
    .d      (hw2reg.intr_state.entropy_src_es_fatal_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.entropy_src_es_fatal_err.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_entropy_src_es_fatal_err_qs)
  );

  //   F[edn0_edn_cmd_req_done]: 11:11
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_edn0_edn_cmd_req_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_edn0_edn_cmd_req_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.edn0_edn_cmd_req_done.de),
    .d      (hw2reg.intr_state.edn0_edn_cmd_req_done.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.edn0_edn_cmd_req_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_edn0_edn_cmd_req_done_qs)
  );

  //   F[edn0_edn_fatal_err]: 12:12
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_edn0_edn_fatal_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_edn0_edn_fatal_err_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.edn0_edn_fatal_err.de),
    .d      (hw2reg.intr_state.edn0_edn_fatal_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.edn0_edn_fatal_err.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_edn0_edn_fatal_err_qs)
  );

  //   F[csrng_cs_cmd_req_done]: 13:13
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_csrng_cs_cmd_req_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_csrng_cs_cmd_req_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.csrng_cs_cmd_req_done.de),
    .d      (hw2reg.intr_state.csrng_cs_cmd_req_done.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.csrng_cs_cmd_req_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_csrng_cs_cmd_req_done_qs)
  );

  //   F[csrng_cs_entropy_req]: 14:14
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_csrng_cs_entropy_req (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_csrng_cs_entropy_req_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.csrng_cs_entropy_req.de),
    .d      (hw2reg.intr_state.csrng_cs_entropy_req.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.csrng_cs_entropy_req.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_csrng_cs_entropy_req_qs)
  );

  //   F[csrng_cs_hw_inst_exc]: 15:15
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_csrng_cs_hw_inst_exc (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_csrng_cs_hw_inst_exc_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.csrng_cs_hw_inst_exc.de),
    .d      (hw2reg.intr_state.csrng_cs_hw_inst_exc.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.csrng_cs_hw_inst_exc.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_csrng_cs_hw_inst_exc_qs)
  );

  //   F[csrng_cs_fatal_err]: 16:16
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0)
  ) u_intr_state_csrng_cs_fatal_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_csrng_cs_fatal_err_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.csrng_cs_fatal_err.de),
    .d      (hw2reg.intr_state.csrng_cs_fatal_err.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.csrng_cs_fatal_err.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_csrng_cs_fatal_err_qs)
  );


  // R[intr_enable]: V(False)
  //   F[kmac_kmac_done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_kmac_kmac_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_kmac_kmac_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.kmac_kmac_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_kmac_kmac_done_qs)
  );

  //   F[kmac_fifo_empty]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_kmac_fifo_empty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_kmac_fifo_empty_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.kmac_fifo_empty.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_kmac_fifo_empty_qs)
  );

  //   F[kmac_kmac_err]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_kmac_kmac_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_kmac_kmac_err_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.kmac_kmac_err.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_kmac_kmac_err_qs)
  );

  //   F[keymgr_op_done]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_keymgr_op_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_keymgr_op_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.keymgr_op_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_keymgr_op_done_qs)
  );

  //   F[hmac_hmac_done]: 4:4
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_hmac_hmac_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_hmac_hmac_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.hmac_hmac_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_hmac_hmac_done_qs)
  );

  //   F[hmac_fifo_empty]: 5:5
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_hmac_fifo_empty (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_hmac_fifo_empty_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.hmac_fifo_empty.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_hmac_fifo_empty_qs)
  );

  //   F[hmac_hmac_err]: 6:6
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_hmac_hmac_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_hmac_hmac_err_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.hmac_hmac_err.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_hmac_hmac_err_qs)
  );

  //   F[entropy_src_es_entropy_valid]: 7:7
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_entropy_src_es_entropy_valid (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_entropy_src_es_entropy_valid_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.entropy_src_es_entropy_valid.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_entropy_src_es_entropy_valid_qs)
  );

  //   F[entropy_src_es_health_test_failed]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_entropy_src_es_health_test_failed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_entropy_src_es_health_test_failed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.entropy_src_es_health_test_failed.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_entropy_src_es_health_test_failed_qs)
  );

  //   F[entropy_src_es_observe_fifo_ready]: 9:9
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_entropy_src_es_observe_fifo_ready (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_entropy_src_es_observe_fifo_ready_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.entropy_src_es_observe_fifo_ready.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_entropy_src_es_observe_fifo_ready_qs)
  );

  //   F[entropy_src_es_fatal_err]: 10:10
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_entropy_src_es_fatal_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_entropy_src_es_fatal_err_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.entropy_src_es_fatal_err.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_entropy_src_es_fatal_err_qs)
  );

  //   F[edn0_edn_cmd_req_done]: 11:11
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_edn0_edn_cmd_req_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_edn0_edn_cmd_req_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.edn0_edn_cmd_req_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_edn0_edn_cmd_req_done_qs)
  );

  //   F[edn0_edn_fatal_err]: 12:12
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_edn0_edn_fatal_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_edn0_edn_fatal_err_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.edn0_edn_fatal_err.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_edn0_edn_fatal_err_qs)
  );

  //   F[csrng_cs_cmd_req_done]: 13:13
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_csrng_cs_cmd_req_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_csrng_cs_cmd_req_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.csrng_cs_cmd_req_done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_csrng_cs_cmd_req_done_qs)
  );

  //   F[csrng_cs_entropy_req]: 14:14
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_csrng_cs_entropy_req (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_csrng_cs_entropy_req_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.csrng_cs_entropy_req.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_csrng_cs_entropy_req_qs)
  );

  //   F[csrng_cs_hw_inst_exc]: 15:15
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_csrng_cs_hw_inst_exc (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_csrng_cs_hw_inst_exc_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.csrng_cs_hw_inst_exc.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_csrng_cs_hw_inst_exc_qs)
  );

  //   F[csrng_cs_fatal_err]: 16:16
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0)
  ) u_intr_enable_csrng_cs_fatal_err (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_csrng_cs_fatal_err_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.csrng_cs_fatal_err.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_csrng_cs_fatal_err_qs)
  );


  // R[intr_test]: V(True)
  logic intr_test_qe;
  logic [16:0] intr_test_flds_we;
  assign intr_test_qe = &intr_test_flds_we;
  //   F[kmac_kmac_done]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_kmac_kmac_done (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_kmac_kmac_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[0]),
    .q      (reg2hw.intr_test.kmac_kmac_done.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.kmac_kmac_done.qe = intr_test_qe;

  //   F[kmac_fifo_empty]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_kmac_fifo_empty (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_kmac_fifo_empty_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[1]),
    .q      (reg2hw.intr_test.kmac_fifo_empty.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.kmac_fifo_empty.qe = intr_test_qe;

  //   F[kmac_kmac_err]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_kmac_kmac_err (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_kmac_kmac_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[2]),
    .q      (reg2hw.intr_test.kmac_kmac_err.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.kmac_kmac_err.qe = intr_test_qe;

  //   F[keymgr_op_done]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_keymgr_op_done (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_keymgr_op_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[3]),
    .q      (reg2hw.intr_test.keymgr_op_done.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.keymgr_op_done.qe = intr_test_qe;

  //   F[hmac_hmac_done]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_hmac_hmac_done (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_hmac_hmac_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[4]),
    .q      (reg2hw.intr_test.hmac_hmac_done.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.hmac_hmac_done.qe = intr_test_qe;

  //   F[hmac_fifo_empty]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_hmac_fifo_empty (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_hmac_fifo_empty_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[5]),
    .q      (reg2hw.intr_test.hmac_fifo_empty.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.hmac_fifo_empty.qe = intr_test_qe;

  //   F[hmac_hmac_err]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_hmac_hmac_err (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_hmac_hmac_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[6]),
    .q      (reg2hw.intr_test.hmac_hmac_err.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.hmac_hmac_err.qe = intr_test_qe;

  //   F[entropy_src_es_entropy_valid]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_entropy_src_es_entropy_valid (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_entropy_src_es_entropy_valid_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[7]),
    .q      (reg2hw.intr_test.entropy_src_es_entropy_valid.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.entropy_src_es_entropy_valid.qe = intr_test_qe;

  //   F[entropy_src_es_health_test_failed]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_entropy_src_es_health_test_failed (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_entropy_src_es_health_test_failed_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[8]),
    .q      (reg2hw.intr_test.entropy_src_es_health_test_failed.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.entropy_src_es_health_test_failed.qe = intr_test_qe;

  //   F[entropy_src_es_observe_fifo_ready]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_entropy_src_es_observe_fifo_ready (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_entropy_src_es_observe_fifo_ready_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[9]),
    .q      (reg2hw.intr_test.entropy_src_es_observe_fifo_ready.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.entropy_src_es_observe_fifo_ready.qe = intr_test_qe;

  //   F[entropy_src_es_fatal_err]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_entropy_src_es_fatal_err (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_entropy_src_es_fatal_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[10]),
    .q      (reg2hw.intr_test.entropy_src_es_fatal_err.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.entropy_src_es_fatal_err.qe = intr_test_qe;

  //   F[edn0_edn_cmd_req_done]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_edn0_edn_cmd_req_done (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_edn0_edn_cmd_req_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[11]),
    .q      (reg2hw.intr_test.edn0_edn_cmd_req_done.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.edn0_edn_cmd_req_done.qe = intr_test_qe;

  //   F[edn0_edn_fatal_err]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_edn0_edn_fatal_err (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_edn0_edn_fatal_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[12]),
    .q      (reg2hw.intr_test.edn0_edn_fatal_err.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.edn0_edn_fatal_err.qe = intr_test_qe;

  //   F[csrng_cs_cmd_req_done]: 13:13
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_csrng_cs_cmd_req_done (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_csrng_cs_cmd_req_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[13]),
    .q      (reg2hw.intr_test.csrng_cs_cmd_req_done.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.csrng_cs_cmd_req_done.qe = intr_test_qe;

  //   F[csrng_cs_entropy_req]: 14:14
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_csrng_cs_entropy_req (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_csrng_cs_entropy_req_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[14]),
    .q      (reg2hw.intr_test.csrng_cs_entropy_req.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.csrng_cs_entropy_req.qe = intr_test_qe;

  //   F[csrng_cs_hw_inst_exc]: 15:15
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_csrng_cs_hw_inst_exc (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_csrng_cs_hw_inst_exc_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[15]),
    .q      (reg2hw.intr_test.csrng_cs_hw_inst_exc.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.csrng_cs_hw_inst_exc.qe = intr_test_qe;

  //   F[csrng_cs_fatal_err]: 16:16
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_csrng_cs_fatal_err (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_csrng_cs_fatal_err_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[16]),
    .q      (reg2hw.intr_test.csrng_cs_fatal_err.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.csrng_cs_fatal_err.qe = intr_test_qe;


  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [11:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  //   F[fatal_fault_hmac]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_fault_hmac (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_fault_hmac_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.fatal_fault_hmac.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_fault_hmac.qe = alert_test_qe;

  //   F[recov_operation_err_kmac]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_recov_operation_err_kmac (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_recov_operation_err_kmac_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[1]),
    .q      (reg2hw.alert_test.recov_operation_err_kmac.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.recov_operation_err_kmac.qe = alert_test_qe;

  //   F[fatal_fault_err_kmac]: 2:2
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_fault_err_kmac (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_fault_err_kmac_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[2]),
    .q      (reg2hw.alert_test.fatal_fault_err_kmac.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_fault_err_kmac.qe = alert_test_qe;

  //   F[recov_operation_err_keymgr]: 3:3
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_recov_operation_err_keymgr (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_recov_operation_err_keymgr_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[3]),
    .q      (reg2hw.alert_test.recov_operation_err_keymgr.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.recov_operation_err_keymgr.qe = alert_test_qe;

  //   F[fatal_fault_err_keymgr]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_fault_err_keymgr (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_fault_err_keymgr_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[4]),
    .q      (reg2hw.alert_test.fatal_fault_err_keymgr.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_fault_err_keymgr.qe = alert_test_qe;

  //   F[fatal_rom_ctrl]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_rom_ctrl (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_rom_ctrl_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[5]),
    .q      (reg2hw.alert_test.fatal_rom_ctrl.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_rom_ctrl.qe = alert_test_qe;

  //   F[recov_alert_edn]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_recov_alert_edn (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_recov_alert_edn_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[6]),
    .q      (reg2hw.alert_test.recov_alert_edn.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.recov_alert_edn.qe = alert_test_qe;

  //   F[fatal_alert_edn]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_alert_edn (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_alert_edn_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[7]),
    .q      (reg2hw.alert_test.fatal_alert_edn.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_alert_edn.qe = alert_test_qe;

  //   F[recov_alert_csrng]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_recov_alert_csrng (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_recov_alert_csrng_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[8]),
    .q      (reg2hw.alert_test.recov_alert_csrng.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.recov_alert_csrng.qe = alert_test_qe;

  //   F[fatal_alert_csrng]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_alert_csrng (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_alert_csrng_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[9]),
    .q      (reg2hw.alert_test.fatal_alert_csrng.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_alert_csrng.qe = alert_test_qe;

  //   F[recov_alert_entropy_src]: 10:10
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_recov_alert_entropy_src (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_recov_alert_entropy_src_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[10]),
    .q      (reg2hw.alert_test.recov_alert_entropy_src.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.recov_alert_entropy_src.qe = alert_test_qe;

  //   F[fatal_alert_entropy_entropy_src]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test_fatal_alert_entropy_entropy_src (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_fatal_alert_entropy_entropy_src_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[11]),
    .q      (reg2hw.alert_test.fatal_alert_entropy_entropy_src.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.fatal_alert_entropy_entropy_src.qe = alert_test_qe;


  // R[cfg_regwen]: V(True)
  prim_subreg_ext #(
    .DW    (1)
  ) u_cfg_regwen (
    .re     (cfg_regwen_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.cfg_regwen.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (cfg_regwen_qs)
  );



  logic [4:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == ROT_TOP_INTR_STATE_OFFSET);
    addr_hit[1] = (reg_addr == ROT_TOP_INTR_ENABLE_OFFSET);
    addr_hit[2] = (reg_addr == ROT_TOP_INTR_TEST_OFFSET);
    addr_hit[3] = (reg_addr == ROT_TOP_ALERT_TEST_OFFSET);
    addr_hit[4] = (reg_addr == ROT_TOP_CFG_REGWEN_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(ROT_TOP_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(ROT_TOP_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(ROT_TOP_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(ROT_TOP_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(ROT_TOP_PERMIT[4] & ~reg_be)))));
  end

  // Generate write-enables
  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;

  assign intr_state_kmac_kmac_done_wd = reg_wdata[0];

  assign intr_state_kmac_fifo_empty_wd = reg_wdata[1];

  assign intr_state_kmac_kmac_err_wd = reg_wdata[2];

  assign intr_state_keymgr_op_done_wd = reg_wdata[3];

  assign intr_state_hmac_hmac_done_wd = reg_wdata[4];

  assign intr_state_hmac_fifo_empty_wd = reg_wdata[5];

  assign intr_state_hmac_hmac_err_wd = reg_wdata[6];

  assign intr_state_entropy_src_es_entropy_valid_wd = reg_wdata[7];

  assign intr_state_entropy_src_es_health_test_failed_wd = reg_wdata[8];

  assign intr_state_entropy_src_es_observe_fifo_ready_wd = reg_wdata[9];

  assign intr_state_entropy_src_es_fatal_err_wd = reg_wdata[10];

  assign intr_state_edn0_edn_cmd_req_done_wd = reg_wdata[11];

  assign intr_state_edn0_edn_fatal_err_wd = reg_wdata[12];

  assign intr_state_csrng_cs_cmd_req_done_wd = reg_wdata[13];

  assign intr_state_csrng_cs_entropy_req_wd = reg_wdata[14];

  assign intr_state_csrng_cs_hw_inst_exc_wd = reg_wdata[15];

  assign intr_state_csrng_cs_fatal_err_wd = reg_wdata[16];
  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;

  assign intr_enable_kmac_kmac_done_wd = reg_wdata[0];

  assign intr_enable_kmac_fifo_empty_wd = reg_wdata[1];

  assign intr_enable_kmac_kmac_err_wd = reg_wdata[2];

  assign intr_enable_keymgr_op_done_wd = reg_wdata[3];

  assign intr_enable_hmac_hmac_done_wd = reg_wdata[4];

  assign intr_enable_hmac_fifo_empty_wd = reg_wdata[5];

  assign intr_enable_hmac_hmac_err_wd = reg_wdata[6];

  assign intr_enable_entropy_src_es_entropy_valid_wd = reg_wdata[7];

  assign intr_enable_entropy_src_es_health_test_failed_wd = reg_wdata[8];

  assign intr_enable_entropy_src_es_observe_fifo_ready_wd = reg_wdata[9];

  assign intr_enable_entropy_src_es_fatal_err_wd = reg_wdata[10];

  assign intr_enable_edn0_edn_cmd_req_done_wd = reg_wdata[11];

  assign intr_enable_edn0_edn_fatal_err_wd = reg_wdata[12];

  assign intr_enable_csrng_cs_cmd_req_done_wd = reg_wdata[13];

  assign intr_enable_csrng_cs_entropy_req_wd = reg_wdata[14];

  assign intr_enable_csrng_cs_hw_inst_exc_wd = reg_wdata[15];

  assign intr_enable_csrng_cs_fatal_err_wd = reg_wdata[16];
  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;

  assign intr_test_kmac_kmac_done_wd = reg_wdata[0];

  assign intr_test_kmac_fifo_empty_wd = reg_wdata[1];

  assign intr_test_kmac_kmac_err_wd = reg_wdata[2];

  assign intr_test_keymgr_op_done_wd = reg_wdata[3];

  assign intr_test_hmac_hmac_done_wd = reg_wdata[4];

  assign intr_test_hmac_fifo_empty_wd = reg_wdata[5];

  assign intr_test_hmac_hmac_err_wd = reg_wdata[6];

  assign intr_test_entropy_src_es_entropy_valid_wd = reg_wdata[7];

  assign intr_test_entropy_src_es_health_test_failed_wd = reg_wdata[8];

  assign intr_test_entropy_src_es_observe_fifo_ready_wd = reg_wdata[9];

  assign intr_test_entropy_src_es_fatal_err_wd = reg_wdata[10];

  assign intr_test_edn0_edn_cmd_req_done_wd = reg_wdata[11];

  assign intr_test_edn0_edn_fatal_err_wd = reg_wdata[12];

  assign intr_test_csrng_cs_cmd_req_done_wd = reg_wdata[13];

  assign intr_test_csrng_cs_entropy_req_wd = reg_wdata[14];

  assign intr_test_csrng_cs_hw_inst_exc_wd = reg_wdata[15];

  assign intr_test_csrng_cs_fatal_err_wd = reg_wdata[16];
  assign alert_test_we = addr_hit[3] & reg_we & !reg_error;

  assign alert_test_fatal_fault_hmac_wd = reg_wdata[0];

  assign alert_test_recov_operation_err_kmac_wd = reg_wdata[1];

  assign alert_test_fatal_fault_err_kmac_wd = reg_wdata[2];

  assign alert_test_recov_operation_err_keymgr_wd = reg_wdata[3];

  assign alert_test_fatal_fault_err_keymgr_wd = reg_wdata[4];

  assign alert_test_fatal_rom_ctrl_wd = reg_wdata[5];

  assign alert_test_recov_alert_edn_wd = reg_wdata[6];

  assign alert_test_fatal_alert_edn_wd = reg_wdata[7];

  assign alert_test_recov_alert_csrng_wd = reg_wdata[8];

  assign alert_test_fatal_alert_csrng_wd = reg_wdata[9];

  assign alert_test_recov_alert_entropy_src_wd = reg_wdata[10];

  assign alert_test_fatal_alert_entropy_entropy_src_wd = reg_wdata[11];
  assign cfg_regwen_re = addr_hit[4] & reg_re & !reg_error;

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check = '0;
    reg_we_check[0] = intr_state_we;
    reg_we_check[1] = intr_enable_we;
    reg_we_check[2] = intr_test_we;
    reg_we_check[3] = alert_test_we;
    reg_we_check[4] = 1'b0;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_kmac_kmac_done_qs;
        reg_rdata_next[1] = intr_state_kmac_fifo_empty_qs;
        reg_rdata_next[2] = intr_state_kmac_kmac_err_qs;
        reg_rdata_next[3] = intr_state_keymgr_op_done_qs;
        reg_rdata_next[4] = intr_state_hmac_hmac_done_qs;
        reg_rdata_next[5] = intr_state_hmac_fifo_empty_qs;
        reg_rdata_next[6] = intr_state_hmac_hmac_err_qs;
        reg_rdata_next[7] = intr_state_entropy_src_es_entropy_valid_qs;
        reg_rdata_next[8] = intr_state_entropy_src_es_health_test_failed_qs;
        reg_rdata_next[9] = intr_state_entropy_src_es_observe_fifo_ready_qs;
        reg_rdata_next[10] = intr_state_entropy_src_es_fatal_err_qs;
        reg_rdata_next[11] = intr_state_edn0_edn_cmd_req_done_qs;
        reg_rdata_next[12] = intr_state_edn0_edn_fatal_err_qs;
        reg_rdata_next[13] = intr_state_csrng_cs_cmd_req_done_qs;
        reg_rdata_next[14] = intr_state_csrng_cs_entropy_req_qs;
        reg_rdata_next[15] = intr_state_csrng_cs_hw_inst_exc_qs;
        reg_rdata_next[16] = intr_state_csrng_cs_fatal_err_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_kmac_kmac_done_qs;
        reg_rdata_next[1] = intr_enable_kmac_fifo_empty_qs;
        reg_rdata_next[2] = intr_enable_kmac_kmac_err_qs;
        reg_rdata_next[3] = intr_enable_keymgr_op_done_qs;
        reg_rdata_next[4] = intr_enable_hmac_hmac_done_qs;
        reg_rdata_next[5] = intr_enable_hmac_fifo_empty_qs;
        reg_rdata_next[6] = intr_enable_hmac_hmac_err_qs;
        reg_rdata_next[7] = intr_enable_entropy_src_es_entropy_valid_qs;
        reg_rdata_next[8] = intr_enable_entropy_src_es_health_test_failed_qs;
        reg_rdata_next[9] = intr_enable_entropy_src_es_observe_fifo_ready_qs;
        reg_rdata_next[10] = intr_enable_entropy_src_es_fatal_err_qs;
        reg_rdata_next[11] = intr_enable_edn0_edn_cmd_req_done_qs;
        reg_rdata_next[12] = intr_enable_edn0_edn_fatal_err_qs;
        reg_rdata_next[13] = intr_enable_csrng_cs_cmd_req_done_qs;
        reg_rdata_next[14] = intr_enable_csrng_cs_entropy_req_qs;
        reg_rdata_next[15] = intr_enable_csrng_cs_hw_inst_exc_qs;
        reg_rdata_next[16] = intr_enable_csrng_cs_fatal_err_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
        reg_rdata_next[8] = '0;
        reg_rdata_next[9] = '0;
        reg_rdata_next[10] = '0;
        reg_rdata_next[11] = '0;
        reg_rdata_next[12] = '0;
        reg_rdata_next[13] = '0;
        reg_rdata_next[14] = '0;
        reg_rdata_next[15] = '0;
        reg_rdata_next[16] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
        reg_rdata_next[2] = '0;
        reg_rdata_next[3] = '0;
        reg_rdata_next[4] = '0;
        reg_rdata_next[5] = '0;
        reg_rdata_next[6] = '0;
        reg_rdata_next[7] = '0;
        reg_rdata_next[8] = '0;
        reg_rdata_next[9] = '0;
        reg_rdata_next[10] = '0;
        reg_rdata_next[11] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[0] = cfg_regwen_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
