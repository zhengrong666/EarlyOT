// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package pcr_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 7;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } rd_en;
    struct packed {
      logic        q;
    } wr_en;
    struct packed {
      logic [4:0]  q;
    } select;
  } pcr_reg2hw_ctrl_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } pcr_reg2hw_pcr_wr_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } pcr_hw2reg_pcr_rd_mreg_t;

  // Register -> HW type
  typedef struct packed {
    pcr_reg2hw_ctrl_reg_t ctrl; // [262:256]
    pcr_reg2hw_pcr_wr_mreg_t [7:0] pcr_wr; // [255:0]
  } pcr_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    pcr_hw2reg_pcr_rd_mreg_t [7:0] pcr_rd; // [263:0]
  } pcr_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] PCR_CTRL_OFFSET = 7'h 0;
  parameter logic [BlockAw-1:0] PCR_PCR_WR_0_OFFSET = 7'h 4;
  parameter logic [BlockAw-1:0] PCR_PCR_WR_1_OFFSET = 7'h 8;
  parameter logic [BlockAw-1:0] PCR_PCR_WR_2_OFFSET = 7'h c;
  parameter logic [BlockAw-1:0] PCR_PCR_WR_3_OFFSET = 7'h 10;
  parameter logic [BlockAw-1:0] PCR_PCR_WR_4_OFFSET = 7'h 14;
  parameter logic [BlockAw-1:0] PCR_PCR_WR_5_OFFSET = 7'h 18;
  parameter logic [BlockAw-1:0] PCR_PCR_WR_6_OFFSET = 7'h 1c;
  parameter logic [BlockAw-1:0] PCR_PCR_WR_7_OFFSET = 7'h 20;
  parameter logic [BlockAw-1:0] PCR_PCR_RD_0_OFFSET = 7'h 24;
  parameter logic [BlockAw-1:0] PCR_PCR_RD_1_OFFSET = 7'h 28;
  parameter logic [BlockAw-1:0] PCR_PCR_RD_2_OFFSET = 7'h 2c;
  parameter logic [BlockAw-1:0] PCR_PCR_RD_3_OFFSET = 7'h 30;
  parameter logic [BlockAw-1:0] PCR_PCR_RD_4_OFFSET = 7'h 34;
  parameter logic [BlockAw-1:0] PCR_PCR_RD_5_OFFSET = 7'h 38;
  parameter logic [BlockAw-1:0] PCR_PCR_RD_6_OFFSET = 7'h 3c;
  parameter logic [BlockAw-1:0] PCR_PCR_RD_7_OFFSET = 7'h 40;

  // Register index
  typedef enum int {
    PCR_CTRL,
    PCR_PCR_WR_0,
    PCR_PCR_WR_1,
    PCR_PCR_WR_2,
    PCR_PCR_WR_3,
    PCR_PCR_WR_4,
    PCR_PCR_WR_5,
    PCR_PCR_WR_6,
    PCR_PCR_WR_7,
    PCR_PCR_RD_0,
    PCR_PCR_RD_1,
    PCR_PCR_RD_2,
    PCR_PCR_RD_3,
    PCR_PCR_RD_4,
    PCR_PCR_RD_5,
    PCR_PCR_RD_6,
    PCR_PCR_RD_7
  } pcr_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] PCR_PERMIT [17] = '{
    4'b 0001, // index[ 0] PCR_CTRL
    4'b 1111, // index[ 1] PCR_PCR_WR_0
    4'b 1111, // index[ 2] PCR_PCR_WR_1
    4'b 1111, // index[ 3] PCR_PCR_WR_2
    4'b 1111, // index[ 4] PCR_PCR_WR_3
    4'b 1111, // index[ 5] PCR_PCR_WR_4
    4'b 1111, // index[ 6] PCR_PCR_WR_5
    4'b 1111, // index[ 7] PCR_PCR_WR_6
    4'b 1111, // index[ 8] PCR_PCR_WR_7
    4'b 1111, // index[ 9] PCR_PCR_RD_0
    4'b 1111, // index[10] PCR_PCR_RD_1
    4'b 1111, // index[11] PCR_PCR_RD_2
    4'b 1111, // index[12] PCR_PCR_RD_3
    4'b 1111, // index[13] PCR_PCR_RD_4
    4'b 1111, // index[14] PCR_PCR_RD_5
    4'b 1111, // index[15] PCR_PCR_RD_6
    4'b 1111  // index[16] PCR_PCR_RD_7
  };

endpackage
